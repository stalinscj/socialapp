<?php

namespace Tests;

use App\Models\User;
use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Broadcasting\PresenceChannel;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication;

    /**
     * Returns a User after sign in
     *
     * @param \App\Models\User|null $user
     * @return \App\Models\User
     */
    protected function signIn($user = null)
    {
        $user = $user ?: User::factory()->create();

        $this->actingAs($user);

        return $user;
    }

    /**
     * Assert Class Uses Trait
     *
     * @param string $model
     * @param string|array $trait
     * @return void
     */
    protected function assertClassUsesTrait($model, $trait)
    {
        $traits = collect($trait);
        $traitsUsed = class_uses($model);

        foreach ($traits as $trait) {
            $this->assertArrayHasKey($trait, $traitsUsed, "$model must use $trait trait");
        }
    }

    /**
     * Assert does not broadcast event to current user
     *
     * @param mixed $event
     * @param string $channelType
     * @return void
     */
    protected function assertDontBroadcastToCurrentUser($event, $socketId='socket-id')
    {
        $this->assertInstanceOf(ShouldBroadcast::class, $event);

        $this->assertEquals(
            $socketId, // Generated by Broadcast::shouldReceive('socket')->andReturn('socket-id')
            $event->socket, 
            'The event '.get_class($event).' must call the method "dontBroadcastToCurrentUser" in the constructor.'
        );
    }

    /**
     * Assert Event channel's type correspond to type given
     *
     * @param string $channelType
     * @param mixed $event
     * @return void
     */
    protected function assertEventChannelType($channelType, $event)
    {
        $types = [
            'public'   => Channel::class,
            'private'  => PrivateChannel::class,
            'presence' => PresenceChannel::class,
        ];

        $this->assertEquals($types[$channelType], get_class($event->broadcastOn()));
    }

    /**
     * Assert Event channel's name correspond to name given
     *
     * @param string $channelName
     * @param mixed $event
     * @return void
     */
    protected function assertEventChannelName($channelName, $event)
    {
        $this->assertEquals($channelName, $event->broadcastOn()->name);
    }

}
